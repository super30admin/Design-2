# Time - O(1) for each op
# Space - O(1000) amortized

# Create two different hashing functions
# Start arrays with -1 value (not in given input data range)
# Add - If encountered that an element isn't there, create a list at that index
# Remove - Just make it -1

class MyHashSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hashSet = [-1 for _ in range(1000)]
        
    def hash1(self, value):
        return value % 1000
        
    def hash2(self, value):
        return value // 1000
        
    def add(self, key: int) -> None:
        if type(self.hashSet[self.hash1(key)]) != list: self.hashSet[self.hash1(key)] = [-1 for _ in range(1001)]
        self.hashSet[self.hash1(key)][self.hash2(key)] = key
        return

    def remove(self, key: int) -> None:
        if type(self.hashSet[self.hash1(key)]) == list: self.hashSet[self.hash1(key)][self.hash2(key)] = -1
        return

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        if type(self.hashSet[self.hash1(key)]) == list: 
            if self.hashSet[self.hash1(key)][self.hash2(key)] != -1:
                return True
        return False


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)