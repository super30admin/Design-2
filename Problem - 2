// Time Complexity : Add - O(1), Remove - O(1) and contains() - O(1)
// Space Complexity : Worst case O(1000000) - depends on the input data.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Yes I didn't understand how to successfuly write a double hashing function.Didn't know how to divide the buckets and using 10001 instead of 10000.


// Your code here along with comments explaining your approach : Approach is to use the double hashing technique.
class MyHashSet {
    int buckets;
    int bucketItems;
    boolean storage[][];

    /** Initialize your data structure here. */
    public MyHashSet() {
        buckets=1000;
        bucketItems=10001;
        storage=new boolean[buckets][];
    }
    private int bucket(int key){
        return key%buckets;
    }
    
    private int bucketItem(int key){
        return key/buckets;
    }
    
    public void add(int key) {
        int bucket=bucket(key);
        int bucketItem=bucketItem(key);
        if(storage[bucket]==null){
            storage[bucket]=new boolean[bucketItems];
        }
        storage[bucket][bucketItem]=true;
    }
    
    public void remove(int key) {
        int bucket=bucket(key);
        int bucketItem=bucketItem(key);
        if(storage[bucket]!=null){
            storage[bucket][bucketItem]=false;
        }
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        int bucket=bucket(key);
        int bucketItem=bucketItem(key);
        if(storage[bucket]!=null && storage[bucket][bucketItem]==true){
            return true;
        }
        return false;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */