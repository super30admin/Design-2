// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach

approach: Same as hashmap.

class MyHashSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.arr = [None] * 10

    def add(self, key: int) -> None:
        index = key % 10

        if self.arr[index] is None:
            self.arr[index] = []

        if key not in self.arr[index]:
            self.arr[index].append(key)

    def remove(self, key: int) -> None:
        index = key % 10

        if self.arr[index] is None:
            return
        if key in self.arr[index]:
            self.arr[index].remove(key)



    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        index = key % 10

        if self.arr[index] is None or key not in self.arr[index]:
            return False

        return True

# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
