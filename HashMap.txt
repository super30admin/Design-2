//Time Complexity
// Put Operation : O(k)
//Get Operation : O(k)
// Remove Operation : O(k) 
// where is k is the largest value that can be store / length of the bucket
// Here it is 10^6 / 10^4 i.e 100

//Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes

class MyHashMap {
    
    class Node
    {
        int key;
        int val;
        Node next;
        public Node(int key, int val)
        {
            this.key = key;
            this.val = val;
            this.next = null;
        }
    }

    Node[] hashmap;
    int buckets;
    public MyHashMap() 
    {
        buckets = 10000;
        hashmap = new Node[buckets];
    }
    public int getBucket(int key)
    {
        return key % buckets;
    }
    public Node find(Node head, int key)
    {
        Node prev = head;
        Node curr = head.next;
        
        while(curr!=null && curr.key!=key)
        {
            prev = curr;
            curr = curr.next;
        }
        
        return prev;
    }
    public void put(int key, int val) 
    {
        int index = getBucket(key);
        if(hashmap[index] == null)
        {
            hashmap[index] = new Node(-1,-1);
        }
        
        Node prev = find(hashmap[index], key);
        if(prev.next == null)
        {
            prev.next = new Node(key, val);
        }else
        {
             prev.next.val = val;
        }
        
    }
    
    public int get(int key) 
    {
        int index = getBucket(key);
        if(hashmap[index] == null)
        {
            
            return -1;
        }
        
        Node prev = find(hashmap[index], key);
        if(prev.next == null)
        {
            return -1;
        }
        
        return prev.next.val;
    }
    
    public void remove(int key) 
    {
        int index = getBucket(key);
        if(hashmap[index] != null)
        {
            Node prev = find(hashmap[index], key);
            if(prev.next != null)
            {
                prev.next = prev.next.next;
            }
        }
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */