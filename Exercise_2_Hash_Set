# Time Complexity : O(1)
#  Space Complexity : O(N)
#  Did this code successfully run on Leetcode : Yes
#  Any problem you faced while coding this : No
class MyHashSet(object):

    def __init__(self):
        self.size = 1000
        self.hashSet = [None]*self.size

    def add(self, key):
        """
        :type key: int
        :rtype: None
        """
        hash_first = self.hashMod(key)
        hash_second = self.hashDiv(key)
        if self.hashSet[hash_first] is None:
            if hash_first == 0:
                self.hashSet[hash_first] = [None]*(self.size+1)
            else:
                self.hashSet[hash_first] = [None]*(self.size)
        self.hashSet[hash_first][hash_second] = key
        

    def remove(self, key):
        """
        :type key: int
        :rtype: None
        """
        if self.contains(key):
            hash_first = self.hashMod(key)
            hash_second = self.hashDiv(key)
            self.hashSet[hash_first][hash_second] = None
        

    def contains(self, key):
        """
        :type key: int
        :rtype: bool
        """
        hash_first = self.hashMod(key)
        if self.hashSet[hash_first] is not None:
            hash_second = self.hashDiv(key)
            if self.hashSet[hash_first][hash_second] is not None:
                return True
        return False
        
    def hashMod(self,key):
        return key%self.size
    
    def hashDiv(self,key):
        return key//self.size


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)