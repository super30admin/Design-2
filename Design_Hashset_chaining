// Time Complexity : O(n/k)
// Space Complexity : O(n+k)
// Did this code successfully run on Leetcode : No, 23/28 test cases passed
// Any problem you faced while coding this : I am not getting why it did not pass all the test cases, please let me know where i went wrong. and also let me know if my complexities are correct.


// Your code here along with comments explaining your approach: Using chaining.



class ListNode:
    def __init__(self, key, next):
        self.key = key
        self.next = None

class MyHashSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hashset = [None]*10000
        

    def add(self, key: int) -> None:
        index = key % 10000
        if self.hashset[index] == None:
            self.hashset[index] = ListNode(key, None)
            return
        else:
            curr = self.hashset[index]
            while curr:
                if curr == None:
                    curr = ListNode(key, None)
                    return 
                else:
                    curr = curr.next
                    

    def remove(self, key: int) -> None:
        index = key % 10000
        curr = prev = self.hashset[index]
        
        if not curr:
            return
        
        if curr.key == key:
            self.hashset[index] = curr.next
        
        else:
            curr = curr.next
            while curr:
                if curr.key == key:
                    prev.next = curr.next
                else:
                    prev, curr = prev.next, curr.next
                    
        

    def contains(self, key: int) -> bool:
        """
        Returns true if this set contains the specified element
        """
        index = key % 10000
        curr = self.hashset[index]
        
        if not curr:
            return 0
        
        if curr.key == key:
            return 1
        
        else:
            curr = curr.next
            while curr:
                if curr.key == key:
                    return 1
                else:
                    curr = curr.next
            return 0        
