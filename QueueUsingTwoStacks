class MyQueue {
    
    Stack<Integer> in;
    Stack<Integer> out;

    /** Initialize your data structure here. */
    public MyQueue() {
        
        in = new Stack<> ();
        out = new Stack<> ();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
       
        if (out.size() > 0){
           return out.pop(); 
        }else {
            int items = in.size();
            while (items > 0) {
            out.push(in.pop());
            items--;
           }
            return out.pop();
        }
    }
    
    /** Get the front element. */
    public int peek() {
        
        if (out.size() > 0) {
            return out.peek();
        }else {
            int numItems = in.size();
             while (numItems > 0){
            out.push(in.pop());
            numItems--;
          } 
        return out.peek();
        }     
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        
        if (in.size() == 0 && out.size() == 0) return true;
        
        return false;
        
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
