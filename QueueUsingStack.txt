//Time Complexity
// Push Operation : O(1)
//Pop Operation : O(1) Amortized
//Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes



class MyQueue {

    Stack<Integer> s1;
    Stack<Integer> s2;
    
    private int front;
    
    
    public MyQueue() 
    {
        s1 = new Stack<Integer>();
        s2 = new Stack<Integer>();
    }
    
    public void push(int x) 
    {
        if(s1.isEmpty())
        {
            front = x;
        }
        s1.push(x);
    }
    
    public int pop() 
    {
        if(!s2.isEmpty())
        {
            return s2.pop();
        }else
        {
            while(!s1.isEmpty())
            {
                s2.push(s1.pop());
            }
            
            return s2.pop();
        }
        
        
    }
    
    public int peek() 
    {
        if(s2.isEmpty())
        {
            return front;
        }else
        {
            return s2.peek();
        }
    }
    
    public boolean empty() 
    {
        if(s1.isEmpty() && s2.isEmpty())
        {
            return true;
        }
        
        return false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */