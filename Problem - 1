// Time Complexity : Push - O(1), Pop - O(n) in the worst case - where n is the input.
// Space Complexity : Stack - used under the hood no space - O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Yes I didn't understand how to optimally use the two stacks before.


// Your code here along with comments explaining your approach : Approach is to use two stacks.Always keep pushing the elemets in the first stack.When we need to pop, check if stack 2 is empty if yes, shift all the elements to the stack 2 and start popping.

class MyQueue {
     Stack<Integer> s1;
     Stack<Integer> s2;
    /** Initialize your data structure here. */
    public MyQueue() {
        s1=new Stack<Integer>(); 
        s2=new Stack<Integer>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        s1.push(x); 
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
         peek();
         return s2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(s2.isEmpty()){
             while(!s1.isEmpty())
            {
                s2.push(s1.pop());
            }
        }
       return s2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(!s1.isEmpty() || !s2.isEmpty()){
            return false;
        }
        return true;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */