# Time - O(1) amortized for each operation

# Create two stacks in the constructor
# Push to stack 1 always
# Pop - if stack2 is empty, transfer elements from stack1 O(n) - then pop from stack2
# Peek - if stack2 is empty, transfer elements from stack1 O(n) - then peek from stack2
# Empty - check if both stacks are empty

class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack1, self.stack2 = [], []

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        return self.stack1.append(x)

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        if self.stack2: return self.stack2.pop()
        while self.stack1: self.stack2.append(self.stack1.pop())
        return self.stack2.pop()

    def peek(self) -> int:
        """
        Get the front element.
        """
        if self.stack2: return self.stack2[-1]
        while self.stack1: self.stack2.append(self.stack1.pop())
        return self.stack2[-1]

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return not (self.stack1 or self.stack2)