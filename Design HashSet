// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

Solution - TC - O(1) for add, remove and contains
           SC - O(n) where n - no of values


class MyHashSet {
    boolean[][] bucket;
    int bucketSize;

    public MyHashSet() {
        bucketSize = 1000;
        bucket = new boolean[bucketSize][];
    }
    
    public int getHash1(int key)
    {
        return key % bucketSize;
    }
    
    public int getHash2(int key)
    {
        return key / bucketSize;
    }
    
    public void add(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] == null)
        {
            if(add1 == 0)
            {
                bucket[add1] = new boolean[bucketSize + 1];
            }
            else
            {
                bucket[add1] = new boolean[bucketSize]; 
            }
        }
        
        bucket[add1][add2] = true;
    }
    
    public void remove(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] != null)
        {
            if(bucket[add1][add2] == true)
            {
                bucket[add1][add2] = false;
            }
        }
        
    }
    
    public boolean contains(int key) {
        int add1 = getHash1(key);
        int add2 = getHash2(key);
        
        if(bucket[add1] == null)
            return false;
        
        else if(bucket[add1][add2] == true)
            return true;
        else
            return false;
        
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
