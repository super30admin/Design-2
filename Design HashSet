//Time Complexity: O(1)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

Day 1:

class MyHashSet {
  /** Initialize your data structure here. */
    private int bucket=1000;
    private int bucketItems=1000;
    private boolean[] [] set;
 
    
  public MyHashSet() {
      set = new boolean[bucket][];
    }
    
private int getKey(int key)
{
    return (key%bucket);
}
private int getHashKey(int key)
{
    return (key/bucketItems);
}
    
  public void add(int key) {
      int bucket = getKey(key);
      int bucketItem = getHashKey(key);
       if(set[bucket]==null)
       {
           if(bucket==0)
           { set[bucket]= new boolean[bucketItems+1];
          }
           else
           {
                 set[bucket]= new boolean[bucketItems];
           }
        }
      set[bucket][bucketItem] = true;
  }
  
    
    
  public void remove(int key) {
       int bucket = getKey(key);
      if(set[bucket] == null)
          return;
      int bucketItem = getHashKey(key);
      set[bucket][bucketItem]= false;
     
       
  }

  /** Returns true if this set contains the specified element */
  public boolean contains(int key) {
      int bucket = getKey(key);
      int bucketItem = getHashKey(key);
      if(set[bucket]==null)
          return false;
      return set[bucket][bucketItem];
  }


}
