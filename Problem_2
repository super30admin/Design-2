/**
Design Hash Set
Time Complexity : 
add() => O(1)
remove() => O(1)
contains => O(1)

Space Complexity :
add() => O(n) => number of collisions
remove() => O(1)
contains => O(1)

Algorithm :

1. Implementing hashSet using Double hashing
2. Creating space to store 1 million items as below: 
   1st hash function storage => 1001 items
   2nd hash function storage => 1000 considering collisions
3. 1st hash using % operator will give the locatoion where all items with this hash should be stored. The second hash
   will help to find location for collisioned key. So all collisions will be put separately under same bucket usign 2 hashes.

*/

class MyHashSet {
    int buckets;
    int bucketItems;
    boolean[][] storage;
    
    /** Initialize your data structure here. */
    public MyHashSet() {
        buckets = 1001;
        bucketItems = 1000;
        storage = new boolean[buckets][];
    }
    
    private int getBucketHash(int key){
        return key%buckets;
    }
    
    private int getBucketItemHash(int key){
        return key%bucketItems;
    }
    
    public void add(int key) {
        int bucket = getBucketHash(key);
        int bucketItem = getBucketItemHash(key);
        if(storage[bucket] == null){
            storage[bucket] = new boolean[bucketItems];
        }
        storage[bucket][bucketItem] = true;
    }
    
    public void remove(int key) {
        int bucket = getBucketHash(key);
        int bucketItem = getBucketItemHash(key);
        if(storage[bucket] != null){
            storage[bucket][bucketItem] = false;
        }
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        int bucket = getBucketHash(key);
        int bucketItem = getBucketItemHash(key);
        if(storage[bucket] == null){
            return false;
        }else
            return storage[bucket][bucketItem];
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
